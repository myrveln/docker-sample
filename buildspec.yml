version: 0.2
phases:
  pre_build:
    commands:
      - export REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APPLICATION_NAME}
      - export IMAGE_TAG="$(echo ${CODEBUILD_RESOLVED_SOURCE_VERSION} | head -c7)"
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
  build:
    commands:
      - docker build -t ${REPOSITORY_URI}:${IMAGE_TAG} .
  post_build:
    commands:
      - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
      - sed -i 's#{{ APPLICATION_NAME }}#'${APPLICATION_NAME}'#g' appspec.yml
      # Do this in a loop if there are more than one account we should deploy to
      # since it might need different task definitions, and create appropriate artifacts.
      # Assume external role, that give permission to describe task definition
      - ASSUME_ROLE_ARN="arn:aws:iam::${EXTERNAL_ACCOUNT_ID}:role/${APPLICATION_NAME}-codebuild-ca-role"
      - EXTERNAL_ROLE=$(aws sts assume-role --role-arn ${ASSUME_ROLE_ARN} --role-session-name external)
      - export AWS_ACCESS_KEY_ID=$(echo "${EXTERNAL_ROLE}" | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo "${EXTERNAL_ROLE}" | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo "${EXTERNAL_ROLE}" | jq -r '.Credentials.SessionToken')
      # Download the latest task definition of the family
      - aws ecs describe-task-definition --output json --task-definition ${APPLICATION_NAME} --query taskDefinition > template.json
      # Replace the image URI in the downloaded task definition with the URI of the pushed image
      - jq -r ".containerDefinitions[].image = \"${REPOSITORY_URI}:${IMAGE_TAG}\"" template.json > taskdef.json
artifacts:
  files:
    - taskdef.json
    - appspec.yml
